# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# This is your document metadata
info:
  version: "0.0.1"
  title: 17High
basePath: "/v1"
# Describe your paths here
paths:
  # This is a path endpoint. Change it.
  /activities:
    # This is a HTTP operation
    get:
      tags:
        - activity
      # Describe this verb here. Note: you can use markdown
      description: |
        Gets a pageable list of `Activity` objects.
      produces:
      - application/json
      # This is array of GET operation parameters:
      parameters:
        # An example parameter that is in query and is required
        -
          name: size
          in: query
          description: Size of array, default value is **9** when not pass
          required: false
          type: number
          format: int32
        -
          name: page
          in: query
          description: Current page number, default value is **1** when not pass
          required: false
          type: number
          format: int32
        -
          name: type
          in: query
          description: Filter of activity type
          required: false
          type: string
        -
          name: status
          in: query
          description: Filter of activity status
          required: false
          type: string
        -
          name: sortBy
          in: query
          description: Sort by
          required: false
          type: string
        -
          name: sortOrder
          in: query
          description: Sort order
          required: false
          type: string
          enum: ['asc', 'desc']
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            type: array
            items:
              $ref: '#/definitions/Activity'
        400:
          description: General error payload
          schema: 
            $ref: '#/definitions/ErrorModel'
    post:
      tags:
        - activity
      description: Add and publish a new `Activity`
      operationId: publishActivity
      produces:
        - application/json
      parameters:
        - 
          in: body
          name: body
          description: order placed for purchasing the pet
          schema:
            $ref: "#/definitions/Activity"
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Activity"
        "400":
          description: Invalid Activity
  /activities/{id}:
    get:
      tags: 
        - activity
      description: Get the detailed information of a specific `Activity`
      produces:
      - application/json
      parameters:
        - 
          name: id
          in: path
          description: id of the activity
          required: true
          type: string
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Activity'
      #TODO put
      #TODO delete
  /activities/{id}/participants:
    get:
      tags:
        - participant
      description: Return the participants of the specific activity
      produces:
        - application/json
      parameters:
        -
          name: id 
          in: path
          required: true
          type: string
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        404:
          description: Could not found activity
        400:
          description: General error payload
          schema: 
            $ref: '#/definitions/ErrorModel'
    post:
      tags:
        - participant
      description: Join the activity
      produces:
        - application/json
      parameters:
        - 
          name: id
          in: path
          required: true
          type: string
        -
          name: userId
          in: formData
          required: true
          type: string
      responses:
        200:
          description: Successful response
        404:
          description: Could not found activity
        400:
          description: General error payload
          schema: 
            $ref: '#/definitions/ErrorModel'
    delete:
      tags:
        - participant
      description: Join the activity
      produces:
        - application/json
      parameters:
        - 
          name: id
          in: path
          required: true
          type: string
        -
          name: userId
          in: formData
          required: true
          type: string
      responses:
        200:
          description: Successful response
        404:
          description: Could not found activity
        400:
          description: General error payload
          schema: 
            $ref: '#/definitions/ErrorModel'
  /users:
    post:
      tags:
        - user
      description: New user join the app.
      produces:
        - application/json
      parameters:
        - 
          in: body
          name: body
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: Successful response
          schema:
            $ref: "#/definitions/User"
        400:
          description: General error payload
          schema: 
            $ref: '#/definitions/ErrorModel'
  /users/{name}:
    get:
      tags:
        - user
      description: Get a user detail
      produces:
        - application/json
      parameters:
        - 
          in: path
          name: name
          type: string
          required: true
      responses:
        200:
          description: Successful response
          schema:
            $ref: "#/definitions/User"
        404:
          description: User not found
        400:
          description: General error payload
          schema: 
            $ref: '#/definitions/ErrorModel'
    put:
      tags:
        - user
      description: Update a user detail
      produces:
        - application/json
      parameters:
        -
          name: name
          in: path
          type: string
          required: true
        -
          name: body
          in: body
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: Successful response
        404:
          description: User not found
        400:
          description: General error payload
          schema: 
            $ref: '#/definitions/ErrorModel'
  /users/{name}/activities:
    get:
      tags:
        - user
      description: Get joined activities
      produces:
        - application/json
      parameters:
        -
          name: name
          in: path
          type: string
          required: true
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: "#/definitions/Activity"
        404:
          description: User not found
        400:
          description: General error payload
          schema: 
            $ref: '#/definitions/ErrorModel'
#Start of schema definitions
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        minLength: 8
        maxLength: 32
      realName:
        type: string
      avatar:
        type: string
      gender:
        type: string
        enum: ['male', 'female', 'unknown']
      dob:
        type: string
        format: date
  Activity:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      type:
        type: string
      sponsor:
        $ref: '#/definitions/User'
      imageUrl:
        type: string
      status:
        type: string
      startTime:
        type: string
        format: date-time
      endTime:
        format: date-time
        type: string
      location:
        type: string
      shotDescription:
        type: string
      longDescription:
        type: string
  ErrorModel:
    type: object
    required:
    - message
    - code
    properties:
      message:
        type: string
      code:
        type: string
        minLength: 6
      
        
        